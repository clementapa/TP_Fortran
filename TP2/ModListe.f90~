!
! (c) Hacene Ouzia, UPMC France 
!
module ModListe
  use ModElement
  
  implicit none

  type Liste
     integer, private :: size
     type(Element), pointer, private :: head
  end type Liste

  interface creerListe
     module procedure creer_liste_vide, creer_liste_element, creer_liste_donnee, creer_liste_liste
  end interface creerListe

  interface chercherListe
     module procedure localiser_donnee, contient_donnee
  end interface chercherListe

  private :: setSize
  private :: localiser_donnee, contient_donnee
  private :: creer_liste_vide, creer_liste_element, creer_liste_donnee, creer_liste_liste
  
contains 

  subroutine todo(msg)
    implicit none
    character(len=*), intent(in) :: msg
    
    write(*,"(/,'Not implemened yet --> procdeure : ')", advance='no'); write(*,*) msg
    stop "You have a todo to do ... "
    return 
  end subroutine todo
  !<><><><><><><><><><><><><><><><><><><><>
  !<  CONSTRUCTORS
  !<><><><><><><><><><><><><><><><><><><><>
  function vide(argListe)
    implicit none
    type(Liste), intent(in) :: argListe
    logical :: vide
    
    call todo("vide")

    return
  end function vide
  
  subroutine creer_liste_vide(argListe)
    implicit none 
    type(Liste) :: argListe
    
    call nullifyHead(argListe)
    
    call todo("creer_liste_vide")

    return 
  end subroutine creer_liste_vide

  subroutine creer_liste_element(argList, elem)
    type(Liste) :: argList
    type(Element),pointer, intent(in) :: elem

    stop " Error: not implemented "
    return
  end subroutine creer_liste_element
  
  subroutine creer_liste_donnee(argList,newData)
     type(Liste) :: argList
     type(Donnee), pointer, intent(in) :: newData

    stop " Error: not implemented "
    return
  end subroutine creer_liste_donnee
  
  subroutine creer_liste_liste(argList, lst)
    type(Liste) :: argList
    type(Liste), pointer, intent(in) :: lst

    stop " Error: not implemented " 
    return
  end subroutine creer_liste_liste

  !<><><><><><><><><><><><><><><><><><><><>
  !<  METHOD: ADD
  !<><><><><><><><><><><><><><><><><><><><>
  subroutine ajouter(argList,newData) 
    implicit none 
    type(Donnee), intent (in) :: newData
    type(Liste) :: argList
 
    call todo("ajouter")

    return 
  end subroutine ajouter

  !<><><><><><><><><><><><><><><><><><><><>
  !< METHOD: DESTROY
  !<><><><><><><><><><><><><><><><><><><><>
  subroutine supprimer(argList)
    implicit none 
    type(Liste) :: argList
    type(Element), pointer :: nextElem, currentElem

    call todo("supprimer")
    return
  end subroutine supprimer

  !<><><><><><><><><><><><><><><><><><><><>
  !< METHOD: PRINT
  !<><><><><><><><><><><><><><><><><><><><>
  subroutine printListe(argList)
    implicit none 
    type(Liste), intent(in) :: argList
    type(Element), pointer :: currentElem

    call todo("printListe")

    return
  end subroutine printListe

  !<><><><><><><><><><><><><><><><><><><><>
  !< METHOD: FIRST
  !<><><><><><><><><><><><><><><><><><><><>
  function first(arglist)
    implicit none
    type(Liste), intent(in) :: argList
    type(Element), pointer :: first
    
    first => getHead(argList)

    return
  end function first

  !<><><><><><><><><><><><><><><><><><><><>
  !< METHODS: FIND
  !<><><><><><><><><><><><><><><><><><><><>
  function contient_donnee(argList, info)
    implicit none
    type(Donnee), intent (in) :: info
    type(Liste) :: argList
    logical :: contient_donnee

    call todo("contien_donnee")

    return 
  end function contient_donnee
  
  function localiser_donnee(argList,info,prev,elem)
    implicit none
    type(Liste) :: arglist
    type(Donnee), intent(in) :: info
    type(Element), pointer :: elem, next, prev

    logical :: localiser_donnee

    call todo("localiser_donnee")

    return 
  end function localiser_donnee

  !<><><><><><><><><><><><><><><><><><><><>
  !< METHOD: REMOVE
  !<><><><><><><><><><><><><><><><><><><><>
  subroutine remove(argList, info)
    type(Liste) :: argList
    type(Donnee) :: info
    type(Element), pointer :: elem, prev

    call todo("remove")
    return    
    end subroutine remove

  !<><><><><><><><><><><><><><><><><><><><>
  !< METHODS: GETTERS
  !<><><><><><><><><><><><><><><><><><><><>
  function getSize(argListe)
    implicit none
    type(Liste), intent(in) :: argListe
    integer :: getSize

    getSize = argListe%size
    return 
  end function getSize

  function getHead(argListe)
    type(Liste), intent(in) :: argListe
    type(Element), pointer :: getHead

    getHead => argListe % head
    return 
  end function getHead

 !<><><><><><><><><><><><><><><><><><><><>
  !< METHODS: SETTERS
  !<><><><><><><><><><><><><><><><><><><><>
  subroutine setSize(argListe,valeur)
    implicit none
    integer, intent(in) :: valeur
    type(Liste) :: argListe

    argListe%size = valeur

    return
  end subroutine setSize

  subroutine setHead(argListe, Elem)
    implicit none
    type(Liste) :: argListe
    type(Element), pointer, intent(in) :: Elem
    
    if( .NOT. associated( Elem ) ) then 
       call ElementPointerNotAssociatedError("setHead")
    else
       argListe % head => Elem
    end if

    return
  end subroutine setHead

  subroutine nullifyHead(argList)
    implicit none
    type(Liste) :: argList

    nullify(argList % head)

    return
  end subroutine nullifyHead
  
end module ModListe
